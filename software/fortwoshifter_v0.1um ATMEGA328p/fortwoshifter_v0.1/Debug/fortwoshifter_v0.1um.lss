
fortwoshifter_v0.1um.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea3  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087a  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000701  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039d  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <EEPROM_write>:
#include "eeprom.h"
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)

{

	while(EECR & (1<<EEPE)) //ждем освобождения флага окончания последней операцией с памятью
  90:	f9 99       	sbic	0x1f, 1	; 31
  92:	fe cf       	rjmp	.-4      	; 0x90 <EEPROM_write>

	{}

	EEAR = uiAddress; //Устанавливаем адрес
  94:	92 bd       	out	0x22, r25	; 34
  96:	81 bd       	out	0x21, r24	; 33

	EEDR = ucData; //Пищем данные в регистр
  98:	60 bd       	out	0x20, r22	; 32

	EECR |= (1<<EEMPE); //Разрешаем запись
  9a:	fa 9a       	sbi	0x1f, 2	; 31

	EECR |= (1<<EEPE); //Пишем байт в память
  9c:	f9 9a       	sbi	0x1f, 1	; 31
  9e:	08 95       	ret

000000a0 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)

{

	while(EECR & (1<<EEPE))
  a0:	f9 99       	sbic	0x1f, 1	; 31
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <EEPROM_read>

	{} //ждем освобождения флага окончания последней операцией с памятью

	EEAR = uiAddress; //Устанавливаем адрес
  a4:	92 bd       	out	0x22, r25	; 34
  a6:	81 bd       	out	0x21, r24	; 33

	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  a8:	f8 9a       	sbi	0x1f, 0	; 31

	return EEDR; //Возвращаем результат
  aa:	80 b5       	in	r24, 0x20	; 32

  ac:	08 95       	ret

000000ae <port_ini>:
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
		case 3: USART_Transmit('D');   break;             //драйв
		case 4: USART_Transmit('-');   break;             //-
		case 5: USART_Transmit('+');   break;             //+
		case 6: USART_Transmit('A');   break;             //авто/ручной
  ae:	80 ef       	ldi	r24, 0xF0	; 240
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	08 95       	ret

000000b8 <main>:


int main(void)
{
	
	port_ini();
  b8:	0e 94 57 00 	call	0xae	; 0xae <port_ini>
	Amode=EEPROM_read(1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <EEPROM_read>
  c4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Amode>
	A1=EEPROM_read(1);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 50 00 	call	0xa0	; 0xa0 <EEPROM_read>
  d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <A1>
	
	USART_Init(8);
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 c2 01 	call	0x384	; 0x384 <USART_Init>
	USART_Transmit('N');//Передаем при включении
  dc:	8e e4       	ldi	r24, 0x4E	; 78
  de:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
							_delay_ms(10);
							Lpsh=0;
							if (N==0)
							{
								gear_state(2);
								N=1;
  e2:	c1 e0       	ldi	r28, 0x01	; 1

    //sei();
    while (1) 	
    { 
		//драйв
		if (Lpsh==0) //запрет одновременной активации реверса и драйва
  e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Lpsh>
  e8:	81 11       	cpse	r24, r1
  ea:	98 c0       	rjmp	.+304    	; 0x21c <main+0x164>
		{
					if (PINC&0x02) // запрет одновременного нажатия
  ec:	31 9b       	sbis	0x06, 1	; 6
  ee:	96 c0       	rjmp	.+300    	; 0x21c <main+0x164>
					{
						if (bs_Rpsh==0) //включение драйва проверка состояния кнопки
  f0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <bs_Rpsh>
  f4:	81 11       	cpse	r24, r1
  f6:	29 c0       	rjmp	.+82     	; 0x14a <main+0x92>
						{
							if (!(PINC&0x04)) //проверка текущего состояния кнопки
  f8:	32 99       	sbic	0x06, 2	; 6
  fa:	36 c1       	rjmp	.+620    	; 0x368 <main+0x2b0>
							{
								Rpsh=1;
  fc:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <Rpsh>
								if (Rpsh1==0)
 100:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Rpsh1>
 104:	81 11       	cpse	r24, r1
 106:	05 c0       	rjmp	.+10     	; 0x112 <main+0x5a>
{
	switch(gs)
	{
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
		case 3: USART_Transmit('D');   break;             //драйв
 108:	84 e4       	ldi	r24, 0x44	; 68
 10a:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
							{
								Rpsh=1;
								if (Rpsh1==0)
								{
									gear_state(3); //передача команды
									Rpsh1=1;
 10e:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <Rpsh1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x5e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x64>
 11c:	00 00       	nop
								}
								_delay_ms(10);
								if (PINC&0x04) //пока кнопка зажата состояние не переключится
 11e:	32 9b       	sbis	0x06, 2	; 6
 120:	7d c0       	rjmp	.+250    	; 0x21c <main+0x164>
								{
									Rpsh1=0;
 122:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Rpsh1>
									bs_Rpsh=1;
 126:	c0 93 11 01 	sts	0x0111, r28	; 0x800111 <bs_Rpsh>
									if ((Amode==1)&&(A1==1)) //активация режима авто если он был активен до выключения и проверка однократной активации
 12a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Amode>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	09 f0       	breq	.+2      	; 0x134 <main+0x7c>
 132:	17 c1       	rjmp	.+558    	; 0x362 <main+0x2aa>
 134:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <A1>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	09 f0       	breq	.+2      	; 0x13e <main+0x86>
 13c:	12 c1       	rjmp	.+548    	; 0x362 <main+0x2aa>
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
		case 3: USART_Transmit('D');   break;             //драйв
		case 4: USART_Transmit('-');   break;             //-
		case 5: USART_Transmit('+');   break;             //+
		case 6: USART_Transmit('A');   break;             //авто/ручной
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
									{										
										//for (i=0; i<=10000; i++)//счётчик активности кнопки авто
										//{
										gear_state(6);
										//}
										A1=0;
 144:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <A1>
 148:	69 c0       	rjmp	.+210    	; 0x21c <main+0x164>
								}
							}
						}
						else // при состоянии кнопки ==1
						{
							if (!(PINC&0x04)) //проверить кнопку
 14a:	32 99       	sbic	0x06, 2	; 6
 14c:	67 c0       	rjmp	.+206    	; 0x21c <main+0x164>
							{
								A++; //счётчик удержания правого переключателя от себя
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 152:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <A+0x1>
 156:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <A+0x2>
 15a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <A+0x3>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <A>
 168:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <A+0x1>
 16c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <A+0x2>
 170:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <A+0x3>
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	9e e4       	ldi	r25, 0x4E	; 78
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xc0>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xc6>
 17e:	00 00       	nop
								_delay_ms(10);
								if ((PINC&0x04)&&(A<40))// короткое нажатие
 180:	32 9b       	sbis	0x06, 2	; 6
 182:	20 c0       	rjmp	.+64     	; 0x1c4 <main+0x10c>
 184:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 188:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <A+0x1>
 18c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <A+0x2>
 190:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <A+0x3>
 194:	88 97       	sbiw	r24, 0x28	; 40
 196:	a1 05       	cpc	r26, r1
 198:	b1 05       	cpc	r27, r1
 19a:	08 f0       	brcs	.+2      	; 0x19e <main+0xe6>
 19c:	df c0       	rjmp	.+446    	; 0x35c <main+0x2a4>
void gear_state(unsigned char gs)   //состояния кпп
{
	switch(gs)
	{
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
 19e:	8e e4       	ldi	r24, 0x4E	; 78
 1a0:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
								A++; //счётчик удержания правого переключателя от себя
								_delay_ms(10);
								if ((PINC&0x04)&&(A<40))// короткое нажатие
								{
									gear_state(2);
									Rpsh=0;
 1a4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Rpsh>
									bs_Rpsh=0; //состояние драйва
 1a8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <bs_Rpsh>
									A=0;
 1ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <A>
 1b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <A+0x1>
 1b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <A+0x2>
 1b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <A+0x3>
								}
								if ((PINC&0x04)&&(A>=40)) //длинное нажатие
 1bc:	86 b1       	in	r24, 0x06	; 6
							}
						}
					}
		}
		//_______//реверс
		if ((PINC&0x04)&&(Rpsh==0)) //запрет одновременной активации реверса и драйва
 1be:	32 9b       	sbis	0x06, 2	; 6
 1c0:	6a c0       	rjmp	.+212    	; 0x296 <main+0x1de>
 1c2:	32 c0       	rjmp	.+100    	; 0x228 <main+0x170>
									gear_state(2);
									Rpsh=0;
									bs_Rpsh=0; //состояние драйва
									A=0;
								}
								if ((PINC&0x04)&&(A>=40)) //длинное нажатие
 1c4:	32 9b       	sbis	0x06, 2	; 6
 1c6:	2a c0       	rjmp	.+84     	; 0x21c <main+0x164>
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <A+0x1>
 1d0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <A+0x2>
 1d4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <A+0x3>
 1d8:	88 97       	sbiw	r24, 0x28	; 40
 1da:	a1 05       	cpc	r26, r1
 1dc:	b1 05       	cpc	r27, r1
 1de:	f0 f0       	brcs	.+60     	; 0x21c <main+0x164>
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
		case 3: USART_Transmit('D');   break;             //драйв
		case 4: USART_Transmit('-');   break;             //-
		case 5: USART_Transmit('+');   break;             //+
		case 6: USART_Transmit('A');   break;             //авто/ручной
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
								{
									//for (i=0; i<1; i++)//счётчик активности кнопки авто
									//{
										gear_state(6);
									//}
									A=0;
 1e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <A>
 1ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <A+0x1>
 1ee:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <A+0x2>
 1f2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <A+0x3>
									if (Amode==0)
 1f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Amode>
 1fa:	81 11       	cpse	r24, r1
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <main+0x156>
									{
										EEPROM_write(1, 1); //запись авто режима
 1fe:	6c 2f       	mov	r22, r28
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
										Amode=1;
 208:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <Amode>
 20c:	07 c0       	rjmp	.+14     	; 0x21c <main+0x164>
									}
									else
									{
										EEPROM_write(1, 0); //запись авто режима
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
										Amode=0;
 218:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Amode>
							}
						}
					}
		}
		//_______//реверс
		if ((PINC&0x04)&&(Rpsh==0)) //запрет одновременной активации реверса и драйва
 21c:	32 9b       	sbis	0x06, 2	; 6
 21e:	3b c0       	rjmp	.+118    	; 0x296 <main+0x1de>
 220:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Rpsh>
 224:	81 11       	cpse	r24, r1
 226:	37 c0       	rjmp	.+110    	; 0x296 <main+0x1de>
		{
					if (bs_Lpsh==0)
 228:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bs_Lpsh>
 22c:	81 11       	cpse	r24, r1
 22e:	1a c0       	rjmp	.+52     	; 0x264 <main+0x1ac>
					{
						if (!(PINC&0x02))
 230:	31 99       	sbic	0x06, 1	; 6
 232:	31 c0       	rjmp	.+98     	; 0x296 <main+0x1de>
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x180>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x186>
 23e:	00 00       	nop
						{
							_delay_ms(10);
							Lpsh=1;
 240:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <Lpsh>
							if (Lpsh1==0)//счётчик активности кнопки реверс
 244:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Lpsh1>
 248:	81 11       	cpse	r24, r1
 24a:	05 c0       	rjmp	.+10     	; 0x256 <main+0x19e>

void gear_state(unsigned char gs)   //состояния кпп
{
	switch(gs)
	{
		case 1: USART_Transmit('R');   break;            //реверс
 24c:	82 e5       	ldi	r24, 0x52	; 82
 24e:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
							_delay_ms(10);
							Lpsh=1;
							if (Lpsh1==0)//счётчик активности кнопки реверс
							{
								gear_state(1);
								Lpsh1=1;
 252:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <Lpsh1>
							}
							if (PINC&0x02)
 256:	31 9b       	sbis	0x06, 1	; 6
 258:	1e c0       	rjmp	.+60     	; 0x296 <main+0x1de>
							{
								bs_Lpsh=1;
 25a:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <bs_Lpsh>
								Lpsh1=0;
 25e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Lpsh1>
 262:	19 c0       	rjmp	.+50     	; 0x296 <main+0x1de>
							}
						}
					}
					else
					{
						if (!(PINC&0x02))
 264:	31 99       	sbic	0x06, 1	; 6
 266:	17 c0       	rjmp	.+46     	; 0x296 <main+0x1de>
 268:	8f e1       	ldi	r24, 0x1F	; 31
 26a:	9e e4       	ldi	r25, 0x4E	; 78
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x1b4>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x1ba>
 272:	00 00       	nop
						{
							_delay_ms(10);
							Lpsh=0;
 274:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Lpsh>
							if (N==0)
 278:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <N>
 27c:	81 11       	cpse	r24, r1
 27e:	05 c0       	rjmp	.+10     	; 0x28a <main+0x1d2>
void gear_state(unsigned char gs)   //состояния кпп
{
	switch(gs)
	{
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
 280:	8e e4       	ldi	r24, 0x4E	; 78
 282:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
							_delay_ms(10);
							Lpsh=0;
							if (N==0)
							{
								gear_state(2);
								N=1;
 286:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <N>
							}
							if (PINC&0x02)
 28a:	31 9b       	sbis	0x06, 1	; 6
 28c:	04 c0       	rjmp	.+8      	; 0x296 <main+0x1de>
							{
								bs_Lpsh=0;
 28e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bs_Lpsh>
								N=0;
 292:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <N>
							}
						}
					}
		}
		//______ручное переключение
		if (bs_Rpsh==1) //передача вверх
 296:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <bs_Rpsh>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <main+0x1e8>
 29e:	22 cf       	rjmp	.-444    	; 0xe4 <main+0x2c>
		{
			if ((!(PINC&0x01))&&(bs_Lpl==0)) //проверка нажатия и запрет одновременного включения + и -
 2a0:	30 99       	sbic	0x06, 0	; 6
 2a2:	27 c0       	rjmp	.+78     	; 0x2f2 <main+0x23a>
 2a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bs_Lpl>
 2a8:	81 11       	cpse	r24, r1
 2aa:	23 c0       	rjmp	.+70     	; 0x2f2 <main+0x23a>
 2ac:	8f e1       	ldi	r24, 0x1F	; 31
 2ae:	9e e4       	ldi	r25, 0x4E	; 78
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x1f8>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x1fe>
 2b6:	00 00       	nop
			{
				_delay_ms(10);
				if(up1==0)
 2b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <up1>
 2bc:	81 11       	cpse	r24, r1
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <main+0x212>
	{
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
		case 3: USART_Transmit('D');   break;             //драйв
		case 4: USART_Transmit('-');   break;             //-
		case 5: USART_Transmit('+');   break;             //+
 2c0:	8b e2       	ldi	r24, 0x2B	; 43
 2c2:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
			{
				_delay_ms(10);
				if(up1==0)
				{
					gear_state(5);
					up1=1;
 2c6:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <up1>
				}
				bs_Rpl=1;
 2ca:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <bs_Rpl>
				if (eep<1) //счётчик одной записи
 2ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <eep>
 2d2:	81 11       	cpse	r24, r1
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <main+0x230>
				{
					EEPROM_write(1, 0); //однократная запись ручного режима
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
// 					gear_state(1); //индикатор записи
// 					_delay_ms(500); 
					eep=1;
 2e0:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <eep>
					Amode=0;
 2e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Amode>
				}
				if(PINC&0x01)
 2e8:	30 9b       	sbis	0x06, 0	; 6
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <main+0x248>
				{
					up1=0;
 2ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <up1>
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <main+0x248>
				}
			}
			else
			{
				//gear_state(3);
				bs_Rpl=0;
 2f2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <bs_Rpl>
				eep=0;
 2f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <eep>
			}
			//передача вниз
			if ((!(PINC&0x08))&&(bs_Rpl==0)) //проверка нажатия и запрет одновременного включения + м -
 2fa:	33 99       	sbic	0x06, 3	; 6
 2fc:	2a c0       	rjmp	.+84     	; 0x352 <main+0x29a>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <main+0x254>
 300:	33 99       	sbic	0x06, 3	; 6
 302:	27 c0       	rjmp	.+78     	; 0x352 <main+0x29a>
 304:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <bs_Rpl>
 308:	81 11       	cpse	r24, r1
 30a:	23 c0       	rjmp	.+70     	; 0x352 <main+0x29a>
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	9e e4       	ldi	r25, 0x4E	; 78
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x258>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x25e>
 316:	00 00       	nop
			{
				_delay_ms(10);
				if (dn1==0)
 318:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dn1>
 31c:	81 11       	cpse	r24, r1
 31e:	05 c0       	rjmp	.+10     	; 0x32a <main+0x272>
	switch(gs)
	{
		case 1: USART_Transmit('R');   break;            //реверс
		case 2: USART_Transmit('N');   break;             //нейтраль
		case 3: USART_Transmit('D');   break;             //драйв
		case 4: USART_Transmit('-');   break;             //-
 320:	8d e2       	ldi	r24, 0x2D	; 45
 322:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Transmit>
			{
				_delay_ms(10);
				if (dn1==0)
				{
					gear_state(4);
					dn1=1;
 326:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <dn1>
				}

				bs_Lpl=1;
 32a:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <bs_Lpl>
				if (eepl<1) //счётчик одной записи
 32e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 332:	81 11       	cpse	r24, r1
 334:	09 c0       	rjmp	.+18     	; 0x348 <main+0x290>
				{
					EEPROM_write(1, 0); //однократная запись ручного режима
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
// 					gear_state(1); //индикатор записи
// 					_delay_ms(500); 
					eepl=1;
 340:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
					Amode=0;
 344:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Amode>
				}
				if (PINC&0x08)
 348:	33 9b       	sbis	0x06, 3	; 6
 34a:	cc ce       	rjmp	.-616    	; 0xe4 <main+0x2c>
				{
					dn1=0;
 34c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dn1>
 350:	c9 ce       	rjmp	.-622    	; 0xe4 <main+0x2c>
				}
			}
			else
			{
				//gear_state(3);
				bs_Lpl=0;
 352:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <bs_Lpl>
				eepl=0;
 356:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 35a:	c4 ce       	rjmp	.-632    	; 0xe4 <main+0x2c>
									gear_state(2);
									Rpsh=0;
									bs_Rpsh=0; //состояние драйва
									A=0;
								}
								if ((PINC&0x04)&&(A>=40)) //длинное нажатие
 35c:	32 9b       	sbis	0x06, 2	; 6
 35e:	5e cf       	rjmp	.-324    	; 0x21c <main+0x164>
 360:	3f cf       	rjmp	.-386    	; 0x1e0 <main+0x128>
							}
						}
					}
		}
		//_______//реверс
		if ((PINC&0x04)&&(Rpsh==0)) //запрет одновременной активации реверса и драйва
 362:	32 99       	sbic	0x06, 2	; 6
 364:	04 c0       	rjmp	.+8      	; 0x36e <main+0x2b6>
 366:	9c cf       	rjmp	.-200    	; 0x2a0 <main+0x1e8>
 368:	32 99       	sbic	0x06, 2	; 6
 36a:	07 c0       	rjmp	.+14     	; 0x37a <main+0x2c2>
 36c:	bb ce       	rjmp	.-650    	; 0xe4 <main+0x2c>
 36e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Rpsh>
 372:	88 23       	and	r24, r24
 374:	09 f4       	brne	.+2      	; 0x378 <main+0x2c0>
 376:	58 cf       	rjmp	.-336    	; 0x228 <main+0x170>
 378:	93 cf       	rjmp	.-218    	; 0x2a0 <main+0x1e8>
 37a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Rpsh>
 37e:	81 11       	cpse	r24, r1
 380:	b1 ce       	rjmp	.-670    	; 0xe4 <main+0x2c>
 382:	52 cf       	rjmp	.-348    	; 0x228 <main+0x170>

00000384 <USART_Init>:
#define DATA_BIT   EIGHT_BIT  // USART Data Bit Selection

void USART_Init (unsigned int speed) //инициализация модуля USART
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 384:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BAUD_PRESCALER;
 388:	83 e3       	ldi	r24, 0x33	; 51
 38a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 394:	88 e1       	ldi	r24, 0x18	; 24
 396:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 39a:	08 95       	ret

0000039c <USART_Transmit>:
}
void USART_Transmit(unsigned char data) //функция отправки данных
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 39c:	e0 ec       	ldi	r30, 0xC0	; 192
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	90 81       	ld	r25, Z
 3a2:	95 ff       	sbrs	r25, 5
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <USART_Transmit+0x4>
	UDR0=data; //начало передачи данных
 3a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3aa:	8f ec       	ldi	r24, 0xCF	; 207
 3ac:	97 e0       	ldi	r25, 0x07	; 7
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <USART_Transmit+0x12>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <USART_Transmit+0x18>
 3b4:	00 00       	nop
 3b6:	08 95       	ret

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
