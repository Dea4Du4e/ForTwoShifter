
fortwoshifter_v0.1us.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000828  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000390  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e9  00000000  00000000  000018bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  64:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <port_ini>:
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
		case 4: PORTB=0xF3;   break;             //-
		case 5: PORTB=0xEB;   break;             //+
		case 6: PORTB=0xDB;   break;             //авто/ручной
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
  70:	8d ef       	ldi	r24, 0xFD	; 253
  72:	88 bb       	out	0x18, r24	; 24
  74:	08 95       	ret

00000076 <__vector_13>:
	}
}

ISR(USART_RXC_vect)

{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	2f 93       	push	r18
  82:	4f 93       	push	r20
  84:	5f 93       	push	r21
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
	int R;
	unsigned long U;
	unsigned long D;
	unsigned long Amode;
	R = UDR;
  8e:	4c b1       	in	r20, 0x0c	; 12
  90:	50 e0       	ldi	r21, 0x00	; 0
				if(R=='R')
  92:	42 35       	cpi	r20, 0x52	; 82
  94:	51 05       	cpc	r21, r1
  96:	19 f4       	brne	.+6      	; 0x9e <__vector_13+0x28>

void gear_state(unsigned char gs)   //состояния кпп
{
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	1c c0       	rjmp	.+56     	; 0xd6 <__vector_13+0x60>
	R = UDR;
				if(R=='R')
				{
					gear_state(1);
				}
				if (R=='N')
  9e:	4e 34       	cpi	r20, 0x4E	; 78
  a0:	51 05       	cpc	r21, r1
  a2:	19 f4       	brne	.+6      	; 0xaa <__vector_13+0x34>
void gear_state(unsigned char gs)   //состояния кпп
{
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
  a4:	8d ef       	ldi	r24, 0xFD	; 253
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__vector_13+0xa8>
				}
				if (R=='N')
				{
					gear_state(2);
				}
				if (R=='D')
  aa:	44 34       	cpi	r20, 0x44	; 68
  ac:	51 05       	cpc	r21, r1
  ae:	81 f5       	brne	.+96     	; 0x110 <__vector_13+0x9a>
{
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
  b0:	8b ef       	ldi	r24, 0xFB	; 251
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__vector_13+0xa8>
				}
				if (R=='D')
				{
					gear_state(3);
				}
				if (R=='A')
  b6:	80 ea       	ldi	r24, 0xA0	; 160
  b8:	96 e8       	ldi	r25, 0x86	; 134
  ba:	a1 e0       	ldi	r26, 0x01	; 1
  bc:	b0 e0       	ldi	r27, 0x00	; 0
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
		case 4: PORTB=0xF3;   break;             //-
		case 5: PORTB=0xEB;   break;             //+
		case 6: PORTB=0xDB;   break;             //авто/ручной
  be:	2b ed       	ldi	r18, 0xDB	; 219
  c0:	28 bb       	out	0x18, r18	; 24
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	a1 09       	sbc	r26, r1
  c6:	b1 09       	sbc	r27, r1
				{
					gear_state(3);
				}
				if (R=='A')
				{
					for (Amode=0; Amode<100000; Amode++)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__vector_13+0x4a>
{
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
  ca:	8b ef       	ldi	r24, 0xFB	; 251
  cc:	88 bb       	out	0x18, r24	; 24
					{
						gear_state(4);
					}
					gear_state(3);
				}
				if (R=='+')
  ce:	4b 32       	cpi	r20, 0x2B	; 43
  d0:	51 05       	cpc	r21, r1
  d2:	89 f0       	breq	.+34     	; 0xf6 <__vector_13+0x80>
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__vector_13+0xa8>
					{
						gear_state(6);
					}
					gear_state(3);
				}
				if (R=='-')
  d6:	4d 32       	cpi	r20, 0x2D	; 45
  d8:	51 05       	cpc	r21, r1
  da:	f1 f4       	brne	.+60     	; 0x118 <__vector_13+0xa2>
  dc:	80 ea       	ldi	r24, 0xA0	; 160
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	a1 e0       	ldi	r26, 0x01	; 1
  e2:	b0 e0       	ldi	r27, 0x00	; 0
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
		case 4: PORTB=0xF3;   break;             //-
  e4:	23 ef       	ldi	r18, 0xF3	; 243
  e6:	28 bb       	out	0x18, r18	; 24
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	a1 09       	sbc	r26, r1
  ec:	b1 09       	sbc	r27, r1
					}
					gear_state(3);
				}
				if (R=='-')
				{
					for (D=0; D<100000; D++)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__vector_13+0x70>
{
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
  f0:	8b ef       	ldi	r24, 0xFB	; 251
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	14 c0       	rjmp	.+40     	; 0x11e <__vector_13+0xa8>
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	96 e8       	ldi	r25, 0x86	; 134
  fa:	a1 e0       	ldi	r26, 0x01	; 1
  fc:	b0 e0       	ldi	r27, 0x00	; 0
		case 4: PORTB=0xF3;   break;             //-
		case 5: PORTB=0xEB;   break;             //+
  fe:	2b ee       	ldi	r18, 0xEB	; 235
 100:	28 bb       	out	0x18, r18	; 24
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	a1 09       	sbc	r26, r1
 106:	b1 09       	sbc	r27, r1
					}
					gear_state(3);
				}
				if (R=='+')
				{
					for (U=0; U<100000; U++)
 108:	d9 f7       	brne	.-10     	; 0x100 <__vector_13+0x8a>
{
	switch(gs)
	{
		case 1: PORTB=0xFE;   break;            //реверс
		case 2: PORTB=0xFD;   break;             //нейтраль
		case 3: PORTB=0xFB;   break;             //драйв
 10a:	8b ef       	ldi	r24, 0xFB	; 251
 10c:	88 bb       	out	0x18, r24	; 24
					{
						gear_state(5);
					}
					gear_state(3);
				}
}
 10e:	07 c0       	rjmp	.+14     	; 0x11e <__vector_13+0xa8>
				}
				if (R=='D')
				{
					gear_state(3);
				}
				if (R=='A')
 110:	41 34       	cpi	r20, 0x41	; 65
 112:	51 05       	cpc	r21, r1
 114:	01 f7       	brne	.-64     	; 0xd6 <__vector_13+0x60>
 116:	cf cf       	rjmp	.-98     	; 0xb6 <__vector_13+0x40>
					{
						gear_state(4);
					}
					gear_state(3);
				}
				if (R=='+')
 118:	4b 32       	cpi	r20, 0x2B	; 43
 11a:	51 05       	cpc	r21, r1
 11c:	61 f3       	breq	.-40     	; 0xf6 <__vector_13+0x80>
					{
						gear_state(5);
					}
					gear_state(3);
				}
}
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:

int main(void)
{
	
	port_ini();
 136:	0e 94 36 00 	call	0x6c	; 0x6c <port_ini>

	USART_Init(8);
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
	USART_Transmit('8');
 142:	88 e3       	ldi	r24, 0x38	; 56
 144:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmit>
	
	sei();
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x14>

0000014c <USART_Init>:
 *  Author: Dude
 */ 
#include "USART.h"
void USART_Init (unsigned int speed) //инициализация модуля USART
{
	UBRRH = (unsigned char)(speed>>8);
 14c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)speed;
 14e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN); //включаем передачу и приём по USART
 150:	88 e1       	ldi	r24, 0x18	; 24
 152:	8a b9       	out	0x0a, r24	; 10
	UCSRB|= (1<<RXCIE); //разрешаем прерывание при передаче
 154:	57 9a       	sbi	0x0a, 7	; 10
	UCSRA|=(1<<U2X); // удвоенная скорост ьпередачи данных
 156:	59 9a       	sbi	0x0b, 1	; 11
	UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0); //обращаемся именно к регистру UCSRC(URSEL=1), асинхронный режим (UMSEL=0), без контроля чётности (UPM1=0 и UPM0=0),
 158:	8e e8       	ldi	r24, 0x8E	; 142
 15a:	80 bd       	out	0x20, r24	; 32
	//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 UCSZ0=1) UCSRC |= (1<<UPM1); чётность
	DDRA=0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 160:	1b ba       	out	0x1b, r1	; 27
 162:	08 95       	ret

00000164 <USART_Transmit>:
}
void USART_Transmit(unsigned char data) //функция отправки данных
{
	PORTA=0x01;
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	9b bb       	out	0x1b, r25	; 27
	while(!(UCSRA&(1<<UDRE))); //ожидание опустошения буфера приёма
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <USART_Transmit+0x4>
	UDR=data; //начало передачи данных
 16c:	8c b9       	out	0x0c, r24	; 12
	PORTA=0x00;
 16e:	1b ba       	out	0x1b, r1	; 27
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
